{
  
    
        "post0": {
            "title": "Mundo - comparações entre países",
            "content": "Fonte: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv . Gráficos de contaminação . Os gráficos a seguir apresentam curvas de contaminação de diversos países. Foram criados com o intuito de comparar estratégias de combate à disseminação do vírus. É importante notar que as curvas de contaminação estão amplamente relacionadas à quantidade de testes que os países tem realizado. . . . . . Contaminação Relativa . Essa seção conta com gráficos em que o número de casos é dívidido pela população dos países para que se tenha uma ideia da proporção de infectados por país. . . . . . Óbitos . Os gráficos a seguir apresentam os óbitos contabilizados por COVID-19, nas escalas aritmética e logarítmica. . . . . . Letalidade . O gráfco a seguir aponta o número de mortes dividido pelo número de casos confirmados. É importantíssimo notar a grande dependência desses números da quantidade de testes disponíveis. Quanto mais testes realizados, mais confiáveis os dados. . . . O gráfico a seguir apresenta a curva de letalidade dos países. Novamente reiteramos que: mais do que de fato apresentar uma flutuação da letalidade do vírus, que muito provavelmente não varia tão abruptamente, esses gráficos demonstram, por exemplo, um aumento na quantidade de testes (quando a taxa de letalidade cai), uma mudança na forma de contabilizar os óbitos, entre outros. . . . O gráfico abaixo representa uma estimativa simples da quantidade de casos atualmente no Brasil. Uma vez que a baixa quantidade de testes tem levado os números a uma subnotificação, o cálculo foi realizado com base no número de óbitos registrados por COVID-19 no Brasil e na taxa da Alemanha, país que tem testado massivamente sua população. Desse modo os números são os seguintes: . Número atual de casos registrados no Brasil hoje: 36599 Estimativa de casos no Brasil hoje caso a letalidade seja próxima à da Alemanha: 76449 . . .",
            "url": "https://covid19graficos.github.io/relatorio/coronavirus/2020/04/19/corona-mundo-interativo.html",
            "relUrl": "/coronavirus/2020/04/19/corona-mundo-interativo.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Brasil - comparações entre estados, regiões e cidades",
            "content": "Fonte (estados):https://covid.saude.gov.br/ (cidades) https://data.brasil.io/dataset/covid19/caso.csv.gz . Gráficos de contaminação . Casos novos no país. . . . Os gráficos a seguir apresentam curvas de contaminação dos estados brasileiros. É importante notar que as curvas de contaminação estão amplamente relacionadas à quantidade de testes que os países tem realizado. Até o momento estarão apenas na escala aritmética. . . . Essa seção conta com gráficos em que o número de casos é dívidido pela população dos estados para que se tenha uma ideia da proporção de infectados por país. . . . O gráfico a seguir é um comparativo de casos totais por estado no Brasil. . . . O gráfico a seguir é um comparativo a proporção de habitantes infectados por estado no Brasil. . . . Curvas de contaminação por regiões . Comparações entre as regiões do Brasil. Primeiramente uma soma dos casos por regiões e, posteriormente, uma comparação entre os estados das regiões. . . . . . . . . . . . . . . . . . . . . . . . Óbitos . . . Comparações entre as regiões do Brasil. Primeiramente uma soma dos casos por regiões e, posteriormente, uma comparação entre os estados das regiões. . . . Óbitos por regiões . . . . . . . . . . . . . Letalidade por estado brasileiro . O gráfco a seguir aponta o número de mortes dividido pelo número de casos confirmados. É importantíssimo notar a grande dependência desses números da quantidade de testes disponíveis. Quanto mais testes realizados, mais confiáveis os dados. . . . O gráfico a seguir apresenta a curva de letalidade dos estados. Novamente reiteramos que: mais do que de fato apresentar uma flutuação da letalidade do vírus, que muito provavelmente não varia tão abruptamente, esses gráficos demonstram, por exemplo, um aumento na quantidade de testes (quando a taxa de letalidade cai), uma mudança na forma de contabilizar os óbitos, entre outros. . . . Capitais brasileiras . Comparações entre as capitais de estados do Brasil . . . . . Linhas de todas as cidades . A seguir as linhas de casos e óbitos de todas as cidades do Brasil das quais temos acesso aos dados. Para melhor utilização, encontre a cidade e clique duas vezes sobre sua legenda, isolando-a. Caso queira compará-la com outra cidade, adicione a linha da segunda cidade desejada clicando uma vez sobre sua legenda. . . . . . 200 cidades com maiores números de casos . Abaixo uma tabela com a lista das 200 cidades com mais casos no país. . Estado Cidade Casos Mortes . date . 2020-04-18 SP | São Paulo | 9428 | 686 | . 2020-04-18 RJ | Rio de Janeiro | 3059 | 237 | . 2020-04-18 CE | Fortaleza | 2562 | 141 | . 2020-04-18 AM | Manaus | 1593 | 134 | . 2020-04-18 PE | Recife | 1255 | 94 | . 2020-04-18 MA | São Luís | 990 | 40 | . 2020-04-18 DF | Brasília | 796 | 24 | . 2020-04-18 BA | Salvador | 760 | 19 | . 2020-04-18 PA | Belém | 446 | 22 | . 2020-04-18 MG | Belo Horizonte | 420 | 8 | . 2020-04-18 RS | Porto Alegre | 374 | 9 | . 2020-04-18 AP | Macapá | 328 | 8 | . 2020-04-18 SP | Guarulhos | 305 | 28 | . 2020-04-18 SP | São Bernardo do Campo | 294 | 20 | . 2020-04-18 ES | Vila Velha | 287 | 6 | . 2020-04-18 SP | Santos | 287 | 19 | . 2020-04-18 ES | Serra | 268 | 10 | . 2020-04-18 SP | Osasco | 253 | 23 | . 2020-04-18 ES | Vitória | 244 | 9 | . 2020-04-18 SP | Santo André | 236 | 12 | . 2020-04-18 GO | Goiânia | 226 | 10 | . 2020-04-18 SC | Florianópolis | 224 | 3 | . 2020-04-18 RR | Boa Vista | 200 | 2 | . 2020-04-18 RJ | Niterói | 199 | 14 | . 2020-04-18 PE | Olinda | 198 | 14 | . 2020-04-18 SP | Campinas | 184 | 7 | . 2020-04-18 AM | Manacapuru | 177 | 10 | . 2020-04-18 RJ | Duque de Caxias | 170 | 34 | . 2020-04-18 PB | João Pessoa | 163 | 17 | . 2020-04-18 RJ | Nova Iguaçu | 160 | 13 | . 2020-04-18 PE | Jaboatão dos Guararapes | 159 | 15 | . 2020-04-18 RJ | Volta Redonda | 148 | 6 | . 2020-04-18 SP | São José dos Campos | 138 | 3 | . 2020-04-18 PE | Paulista | 130 | 5 | . 2020-04-18 SP | Mogi das Cruzes | 120 | 7 | . 2020-04-18 SP | Diadema | 118 | 5 | . 2020-04-18 SP | Taboão da Serra | 116 | 7 | . 2020-04-18 SP | Barueri | 116 | 5 | . 2020-04-18 AC | Rio Branco | 112 | 5 | . 2020-04-18 ES | Cariacica | 112 | 1 | . 2020-04-18 PI | Teresina | 111 | 5 | . 2020-04-18 AL | Maceió | 107 | 6 | . 2020-04-18 RJ | São Gonçalo | 104 | 6 | . 2020-04-18 SP | São Caetano do Sul | 98 | 4 | . 2020-04-18 MG | Juiz de Fora | 93 | 2 | . 2020-04-18 MT | Cuiabá | 91 | 1 | . 2020-04-18 MA | São José de Ribamar | 90 | 4 | . 2020-04-18 RO | Porto Velho | 88 | 3 | . 2020-04-18 PE | Camaragibe | 87 | 7 | . 2020-04-18 SC | Joinville | 86 | 2 | . 2020-04-18 MS | Campo Grande | 85 | 2 | . 2020-04-18 SP | Mauá | 82 | 4 | . 2020-04-18 SP | Suzano | 81 | 6 | . 2020-04-18 SP | Cotia | 79 | 5 | . 2020-04-18 CE | Caucaia | 78 | 5 | . 2020-04-18 RJ | São João de Meriti | 77 | 6 | . 2020-04-18 SP | Ribeirão Preto | 76 | 5 | . 2020-04-18 SC | Blumenau | 75 | 0 | . 2020-04-18 SP | Carapicuíba | 71 | 3 | . 2020-04-18 SP | São José do Rio Preto | 70 | 4 | . 2020-04-18 PA | Ananindeua | 68 | 1 | . 2020-04-18 RJ | Petrópolis | 67 | 6 | . 2020-04-18 MG | Uberlândia | 67 | 4 | . 2020-04-18 PE | São Lourenço da Mata | 64 | 13 | . 2020-04-18 SP | Importados/Indefinidos | 63 | 0 | . 2020-04-18 CE | Maracanaú | 63 | 4 | . 2020-04-18 RJ | Belford Roxo | 63 | 6 | . 2020-04-18 BA | Ilhéus | 60 | 2 | . 2020-04-18 AP | Santana | 60 | 2 | . 2020-04-18 SP | Franco da Rocha | 60 | 3 | . 2020-04-18 SC | Balneário Camboriú | 59 | 1 | . 2020-04-18 SP | Embu das Artes | 57 | 3 | . 2020-04-18 RJ | Mesquita | 56 | 7 | . 2020-04-18 SC | Camboriú | 56 | 2 | . 2020-04-18 SP | Ferraz de Vasconcelos | 54 | 2 | . 2020-04-18 BA | Feira de Santana | 54 | 1 | . 2020-04-18 SP | Santana de Parnaíba | 54 | 0 | . 2020-04-18 SE | Aracaju | 52 | 4 | . 2020-04-18 SP | Bauru | 50 | 3 | . 2020-04-18 SP | Praia Grande | 50 | 7 | . 2020-04-18 SP | Itaquaquecetuba | 48 | 0 | . 2020-04-18 SP | Caieiras | 48 | 6 | . 2020-04-18 SP | Itapecerica da Serra | 47 | 1 | . 2020-04-18 MG | Nova Lima | 45 | 0 | . 2020-04-18 SC | Criciúma | 44 | 4 | . 2020-04-18 SP | Jundiaí | 44 | 4 | . 2020-04-18 SP | Araraquara | 44 | 2 | . 2020-04-18 SP | Guarujá | 44 | 2 | . 2020-04-18 ES | Importados/Indefinidos | 43 | 1 | . 2020-04-18 RS | Caxias do Sul | 42 | 0 | . 2020-04-18 RS | Passo Fundo | 41 | 3 | . 2020-04-18 SC | Itajaí | 41 | 2 | . 2020-04-18 SP | Sorocaba | 41 | 8 | . 2020-04-18 SP | São Vicente | 40 | 0 | . 2020-04-18 MA | Paço do Lumiar | 39 | 2 | . 2020-04-18 CE | Aquiraz | 38 | 0 | . 2020-04-18 SP | Araçatuba | 37 | 0 | . 2020-04-18 SP | Itapevi | 37 | 5 | . 2020-04-18 MG | Divinópolis | 36 | 1 | . 2020-04-18 SP | Bragança Paulista | 36 | 7 | . 2020-04-18 SC | São José | 35 | 1 | . 2020-04-18 RJ | Maricá | 35 | 4 | . 2020-04-18 MG | Contagem | 34 | 0 | . 2020-04-18 RJ | Itaboraí | 34 | 5 | . 2020-04-18 CE | Importados/Indefinidos | 34 | 0 | . 2020-04-18 RJ | Magé | 33 | 3 | . 2020-04-18 SC | Tubarão | 33 | 2 | . 2020-04-18 BA | Itabuna | 32 | 0 | . 2020-04-18 SP | Ribeirão Pires | 31 | 0 | . 2020-04-18 RJ | Nova Friburgo | 30 | 1 | . 2020-04-18 SP | Francisco Morato | 29 | 1 | . 2020-04-18 RS | Bagé | 29 | 0 | . 2020-04-18 GO | Anápolis | 29 | 0 | . 2020-04-18 BA | Lauro de Freitas | 28 | 4 | . 2020-04-18 SP | Botucatu | 27 | 2 | . 2020-04-18 SC | Braço do Norte | 27 | 1 | . 2020-04-18 CE | Eusébio | 27 | 4 | . 2020-04-18 RS | Novo Hamburgo | 26 | 2 | . 2020-04-18 PE | Fernando de Noronha | 26 | 0 | . 2020-04-18 SP | Americana | 25 | 3 | . 2020-04-18 RJ | Nilópolis | 25 | 0 | . 2020-04-18 SP | Poá | 25 | 3 | . 2020-04-18 MT | Rondonópolis | 24 | 1 | . 2020-04-18 CE | Sobral | 24 | 0 | . 2020-04-18 SP | Arujá | 24 | 1 | . 2020-04-18 TO | Palmas | 23 | 1 | . 2020-04-18 MA | Imperatriz | 23 | 2 | . 2020-04-18 RS | Lajeado | 23 | 0 | . 2020-04-18 GO | Goianésia | 22 | 0 | . 2020-04-18 SP | Atibaia | 22 | 1 | . 2020-04-18 BA | Camaçari | 22 | 0 | . 2020-04-18 PE | Cabo de Santo Agostinho | 22 | 11 | . 2020-04-18 MG | Uberaba | 22 | 2 | . 2020-04-18 AM | Iranduba | 21 | 3 | . 2020-04-18 SC | Brusque | 21 | 0 | . 2020-04-18 RO | Ariquemes | 21 | 0 | . 2020-04-18 RJ | Macaé | 21 | 4 | . 2020-04-18 ES | Linhares | 21 | 1 | . 2020-04-18 RS | Marau | 21 | 1 | . 2020-04-18 PE | Abreu e Lima | 21 | 0 | . 2020-04-18 PB | Santa Rita | 21 | 2 | . 2020-04-18 PE | Vitória de Santo Antão | 20 | 4 | . 2020-04-18 PA | Santarém | 20 | 2 | . 2020-04-18 RS | São Leopoldo | 19 | 1 | . 2020-04-18 BA | Vitória da Conquista | 19 | 1 | . 2020-04-18 SP | Piracicaba | 19 | 2 | . 2020-04-18 MG | Pouso Alegre | 18 | 2 | . 2020-04-18 SP | Jacareí | 18 | 0 | . 2020-04-18 ES | Colatina | 17 | 0 | . 2020-04-18 RS | Canoas | 17 | 1 | . 2020-04-18 PE | Igarassu | 16 | 3 | . 2020-04-18 MS | Três Lagoas | 16 | 1 | . 2020-04-18 RJ | Teresópolis | 16 | 1 | . 2020-04-18 RJ | Queimados | 16 | 1 | . 2020-04-18 PA | Parauapebas | 15 | 3 | . 2020-04-18 RS | Viamão | 15 | 0 | . 2020-04-18 BA | Ipiaú | 15 | 0 | . 2020-04-18 SP | Ilha Comprida | 15 | 0 | . 2020-04-18 RJ | Rio das Ostras | 15 | 4 | . 2020-04-18 RS | Gravataí | 15 | 0 | . 2020-04-18 CE | Maranguape | 15 | 2 | . 2020-04-18 SP | Cubatão | 15 | 0 | . 2020-04-18 PE | Caruaru | 15 | 1 | . 2020-04-18 CE | Quixadá | 15 | 0 | . 2020-04-18 AM | Itacoatiara | 15 | 1 | . 2020-04-18 SP | Rio Claro | 14 | 3 | . 2020-04-18 MG | Lagoa da Prata | 14 | 0 | . 2020-04-18 RJ | Barra Mansa | 14 | 1 | . 2020-04-18 SP | Vinhedo | 14 | 0 | . 2020-04-18 SC | Importados/Indefinidos | 14 | 0 | . 2020-04-18 AC | Plácido de Castro | 14 | 1 | . 2020-04-18 SC | Palhoça | 14 | 1 | . 2020-04-18 SP | Itapira | 14 | 3 | . 2020-04-18 MT | Sinop | 13 | 0 | . 2020-04-18 RS | Bento Gonçalves | 13 | 0 | . 2020-04-18 GO | Rio Verde | 13 | 1 | . 2020-04-18 SP | Jandira | 13 | 1 | . 2020-04-18 BA | Porto Seguro | 13 | 0 | . 2020-04-18 SC | Imbituba | 13 | 0 | . 2020-04-18 RS | Santa Maria | 13 | 0 | . 2020-04-18 RS | Pelotas | 12 | 0 | . 2020-04-18 ES | São Mateus | 12 | 1 | . 2020-04-18 ES | Alfredo Chaves | 12 | 0 | . 2020-04-18 RJ | São Pedro da Aldeia | 12 | 2 | . 2020-04-18 SC | Lages | 12 | 0 | . 2020-04-18 MG | Extrema | 12 | 0 | . 2020-04-18 AC | Acrelândia | 12 | 0 | . 2020-04-18 MG | Importados/Indefinidos | 12 | 0 | . 2020-04-18 CE | Horizonte | 12 | 2 | . 2020-04-18 RJ | Barra do Piraí | 12 | 2 | . 2020-04-18 PB | Campina Grande | 12 | 1 | . 2020-04-18 RJ | Araruama | 12 | 1 | . 2020-04-18 AM | Tonantins | 12 | 0 | . 2020-04-18 BA | Uruçuca | 12 | 2 | . 2020-04-18 MS | Dourados | 11 | 0 | . 2020-04-18 SC | Gravatal | 11 | 0 | . 2020-04-18 SP | Caraguatatuba | 11 | 2 | . 2020-04-18 BA | Jequié | 11 | 0 | . 2020-04-18 PE | Importados/Indefinidos | 11 | 1 | . 2020-04-18 MS | Nova Andradina | 11 | 0 | .",
            "url": "https://covid19graficos.github.io/relatorio/coronavirus/2020/04/19/corona-brasil-interativo.html",
            "relUrl": "/coronavirus/2020/04/19/corona-brasil-interativo.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Brasil - comparações entre estados, regiões e cidades",
            "content": "Fonte (estados):https://covid.saude.gov.br/ (cidades) https://data.brasil.io/dataset/covid19/caso.csv.gz . Gráficos de contaminação . Casos novos no país. . . . Os gráficos a seguir apresentam curvas de contaminação dos estados brasileiros. É importante notar que as curvas de contaminação estão amplamente relacionadas à quantidade de testes que os países tem realizado. Até o momento estarão apenas na escala aritmética. . . . Essa seção conta com gráficos em que o número de casos é dívidido pela população dos estados para que se tenha uma ideia da proporção de infectados por país. . . . O gráfico a seguir é um comparativo de casos totais por estado no Brasil. . . . O gráfico a seguir é um comparativo a proporção de habitantes infectados por estado no Brasil. . . . Curvas de contaminação por regiões . Comparações entre as regiões do Brasil. Primeiramente uma soma dos casos por regiões e, posteriormente, uma comparação entre os estados das regiões. . . . . . . . . . . . . . . . . . . . . . . . Óbitos . . . Comparações entre as regiões do Brasil. Primeiramente uma soma dos casos por regiões e, posteriormente, uma comparação entre os estados das regiões. . . . Óbitos por regiões . . . . . . . . . . . . . Letalidade por estado brasileiro . O gráfco a seguir aponta o número de mortes dividido pelo número de casos confirmados. É importantíssimo notar a grande dependência desses números da quantidade de testes disponíveis. Quanto mais testes realizados, mais confiáveis os dados. . . . O gráfico a seguir apresenta a curva de letalidade dos estados. Novamente reiteramos que: mais do que de fato apresentar uma flutuação da letalidade do vírus, que muito provavelmente não varia tão abruptamente, esses gráficos demonstram, por exemplo, um aumento na quantidade de testes (quando a taxa de letalidade cai), uma mudança na forma de contabilizar os óbitos, entre outros. . . . Capitais brasileiras . Comparações entre as capitais de estados do Brasil . . . . . Linhas de todas as cidades . A seguir as linhas de casos e óbitos de todas as cidades do Brasil das quais temos acesso aos dados. Para melhor utilização, encontre a cidade e clique duas vezes sobre sua legenda, isolando-a. Caso queira compará-la com outra cidade, adicione a linha da segunda cidade desejada clicando uma vez sobre sua legenda. . . . . . 200 cidades com maiores números de casos . Abaixo uma tabela com a lista das 200 cidades com mais casos no país. . cidade_last.columns . Index([&#39;state&#39;, &#39;city&#39;, &#39;confirmed&#39;, &#39;deaths&#39;, &#39;data&#39;], dtype=&#39;object&#39;) . Estado Cidade Casos Mortes . date . 2020-04-17 SP | São Paulo | 8744 | 643 | . 2020-04-17 RJ | Rio de Janeiro | 2946 | 219 | . 2020-04-17 CE | Fortaleza | 2300 | 119 | . 2020-04-17 AM | Manaus | 1531 | 127 | . 2020-04-17 PE | Recife | 1136 | 85 | . 2020-04-17 MA | São Luís | 862 | 38 | . 2020-04-17 DF | Brasília | 756 | 24 | . 2020-04-17 BA | Salvador | 643 | 18 | . 2020-04-17 PA | Belém | 435 | 22 | . 2020-04-17 MG | Belo Horizonte | 406 | 8 | . 2020-04-17 RS | Porto Alegre | 369 | 9 | . 2020-04-17 AP | Macapá | 312 | 8 | . 2020-04-17 SP | Guarulhos | 295 | 28 | . 2020-04-17 SP | São Bernardo do Campo | 281 | 17 | . 2020-04-17 SP | Santos | 276 | 19 | . 2020-04-17 SP | Osasco | 224 | 20 | . 2020-04-17 SP | Santo André | 222 | 10 | . 2020-04-17 SC | Florianópolis | 221 | 3 | . 2020-04-17 GO | Goiânia | 188 | 8 | . 2020-04-17 PE | Olinda | 185 | 13 | . 2020-04-17 RJ | Niterói | 185 | 14 | . 2020-04-17 RR | Boa Vista | 183 | 2 | . 2020-04-17 SP | Campinas | 164 | 7 | . 2020-04-17 RJ | Nova Iguaçu | 159 | 12 | . 2020-04-17 AM | Manacapuru | 159 | 6 | . 2020-04-17 PB | João Pessoa | 148 | 17 | . 2020-04-17 RJ | Volta Redonda | 147 | 6 | . 2020-04-17 RJ | Duque de Caxias | 141 | 23 | . 2020-04-17 PE | Jaboatão dos Guararapes | 139 | 14 | . 2020-04-17 SP | São José dos Campos | 135 | 3 | . 2020-04-17 PE | Paulista | 122 | 4 | . 2020-04-17 SP | Diadema | 115 | 3 | . 2020-04-17 SP | Taboão da Serra | 110 | 6 | . 2020-04-17 SP | Mogi das Cruzes | 107 | 7 | . 2020-04-17 AC | Rio Branco | 105 | 4 | . 2020-04-17 SP | Barueri | 101 | 5 | . 2020-04-17 RJ | São Gonçalo | 100 | 6 | . 2020-04-17 PI | Teresina | 94 | 5 | . 2020-04-17 SP | São Caetano do Sul | 94 | 4 | . 2020-04-17 AL | Maceió | 90 | 5 | . 2020-04-17 MT | Cuiabá | 88 | 1 | . 2020-04-17 SC | Joinville | 85 | 2 | . 2020-04-17 MG | Juiz de Fora | 84 | 2 | . 2020-04-17 PE | Camaragibe | 80 | 7 | . 2020-04-17 SP | Mauá | 77 | 4 | . 2020-04-17 MA | São José de Ribamar | 77 | 2 | . 2020-04-17 SP | Cotia | 76 | 4 | . 2020-04-17 RJ | São João de Meriti | 76 | 5 | . 2020-04-17 SC | Blumenau | 75 | 0 | . 2020-04-17 SP | Suzano | 74 | 6 | . 2020-04-17 SP | Ribeirão Preto | 72 | 5 | . 2020-04-17 MS | Campo Grande | 71 | 2 | . 2020-04-17 RO | Porto Velho | 71 | 2 | . 2020-04-17 CE | Caucaia | 71 | 5 | . 2020-04-17 SP | São José do Rio Preto | 68 | 4 | . 2020-04-17 RJ | Petrópolis | 67 | 6 | . 2020-04-17 PA | Ananindeua | 67 | 1 | . 2020-04-17 MG | Uberlândia | 66 | 4 | . 2020-04-17 SP | Importados/Indefinidos | 63 | 0 | . 2020-04-17 PE | São Lourenço da Mata | 61 | 13 | . 2020-04-17 BA | Ilhéus | 60 | 2 | . 2020-04-17 SP | Carapicuíba | 59 | 2 | . 2020-04-17 CE | Maracanaú | 58 | 4 | . 2020-04-17 RJ | Belford Roxo | 58 | 4 | . 2020-04-17 SC | Balneário Camboriú | 58 | 0 | . 2020-04-17 SC | Camboriú | 55 | 2 | . 2020-04-17 SP | Embu das Artes | 55 | 3 | . 2020-04-17 SP | Santana de Parnaíba | 53 | 0 | . 2020-04-17 RJ | Mesquita | 53 | 1 | . 2020-04-17 SP | Franco da Rocha | 52 | 2 | . 2020-04-17 SP | Ferraz de Vasconcelos | 52 | 2 | . 2020-04-17 BA | Feira de Santana | 52 | 0 | . 2020-04-17 AP | Santana | 51 | 2 | . 2020-04-17 SP | Caieiras | 48 | 6 | . 2020-04-17 SP | Itaquaquecetuba | 47 | 0 | . 2020-04-17 SP | Praia Grande | 46 | 7 | . 2020-04-17 MG | Nova Lima | 45 | 0 | . 2020-04-17 SC | Criciúma | 44 | 4 | . 2020-04-17 SE | Aracaju | 44 | 4 | . 2020-04-17 RS | Caxias do Sul | 42 | 0 | . 2020-04-17 SP | Itapecerica da Serra | 42 | 1 | . 2020-04-17 SC | Itajaí | 41 | 2 | . 2020-04-17 SP | Araraquara | 39 | 2 | . 2020-04-17 SP | São Vicente | 39 | 0 | . 2020-04-17 SP | Sorocaba | 39 | 6 | . 2020-04-17 SP | Jundiaí | 38 | 4 | . 2020-04-17 CE | Aquiraz | 38 | 0 | . 2020-04-17 SP | Araçatuba | 37 | 0 | . 2020-04-17 RS | Passo Fundo | 36 | 3 | . 2020-04-17 MG | Divinópolis | 36 | 1 | . 2020-04-17 RJ | Maricá | 35 | 4 | . 2020-04-17 SP | Bragança Paulista | 35 | 7 | . 2020-04-17 CE | Importados/Indefinidos | 35 | 0 | . 2020-04-17 SC | São José | 35 | 1 | . 2020-04-17 RJ | Itaboraí | 33 | 4 | . 2020-04-17 SP | Bauru | 33 | 4 | . 2020-04-17 RJ | Magé | 33 | 3 | . 2020-04-17 SC | Tubarão | 33 | 2 | . 2020-04-17 BA | Itabuna | 32 | 0 | . 2020-04-17 MA | Paço do Lumiar | 32 | 2 | . 2020-04-17 MG | Contagem | 31 | 0 | . 2020-04-17 SP | Itapevi | 29 | 5 | . 2020-04-17 RS | Bagé | 28 | 0 | . 2020-04-17 SP | Ribeirão Pires | 28 | 0 | . 2020-04-17 SP | Guarujá | 27 | 2 | . 2020-04-17 BA | Lauro de Freitas | 27 | 3 | . 2020-04-17 SC | Braço do Norte | 27 | 1 | . 2020-04-17 SP | Botucatu | 27 | 2 | . 2020-04-17 RJ | Nova Friburgo | 26 | 1 | . 2020-04-17 GO | Anápolis | 26 | 0 | . 2020-04-17 RS | Novo Hamburgo | 26 | 2 | . 2020-04-17 RJ | Nilópolis | 25 | 0 | . 2020-04-17 PE | Fernando de Noronha | 24 | 0 | . 2020-04-17 MT | Rondonópolis | 24 | 1 | . 2020-04-17 SP | Americana | 24 | 3 | . 2020-04-17 RS | Lajeado | 23 | 0 | . 2020-04-17 TO | Palmas | 22 | 1 | . 2020-04-17 SP | Poá | 22 | 3 | . 2020-04-17 MG | Uberaba | 22 | 2 | . 2020-04-17 GO | Goianésia | 22 | 0 | . 2020-04-17 MA | Imperatriz | 22 | 2 | . 2020-04-17 PE | Cabo de Santo Agostinho | 21 | 10 | . 2020-04-17 RJ | Macaé | 21 | 4 | . 2020-04-17 CE | Sobral | 21 | 0 | . 2020-04-17 SP | Francisco Morato | 21 | 1 | . 2020-04-17 SC | Brusque | 21 | 0 | . 2020-04-17 SP | Arujá | 21 | 1 | . 2020-04-17 PA | Santarém | 20 | 2 | . 2020-04-17 CE | Eusébio | 20 | 4 | . 2020-04-17 RO | Ariquemes | 20 | 0 | . 2020-04-17 SP | Piracicaba | 19 | 2 | . 2020-04-17 RS | São Leopoldo | 19 | 1 | . 2020-04-17 AM | Iranduba | 18 | 3 | . 2020-04-17 PE | Abreu e Lima | 18 | 0 | . 2020-04-17 SP | Atibaia | 18 | 1 | . 2020-04-17 BA | Camaçari | 18 | 0 | . 2020-04-17 BA | Vitória da Conquista | 18 | 1 | . 2020-04-17 PB | Santa Rita | 17 | 1 | . 2020-04-17 RS | Marau | 17 | 1 | . 2020-04-17 MG | Pouso Alegre | 17 | 2 | . 2020-04-17 RS | Canoas | 17 | 1 | . 2020-04-17 AM | Itacoatiara | 17 | 1 | . 2020-04-17 SP | Jacareí | 17 | 0 | . 2020-04-17 RJ | Queimados | 16 | 1 | . 2020-04-17 MS | Três Lagoas | 16 | 1 | . 2020-04-17 RJ | Teresópolis | 16 | 1 | . 2020-04-17 BA | Ipiaú | 15 | 0 | . 2020-04-17 PE | Igarassu | 15 | 3 | . 2020-04-17 PA | Parauapebas | 15 | 2 | . 2020-04-17 RS | Viamão | 15 | 0 | . 2020-04-17 PE | Vitória de Santo Antão | 15 | 4 | . 2020-04-17 AC | Plácido de Castro | 14 | 1 | . 2020-04-17 MG | Lagoa da Prata | 14 | 0 | . 2020-04-17 SC | Palhoça | 14 | 1 | . 2020-04-17 RS | Gravataí | 14 | 0 | . 2020-04-17 SP | Itapira | 14 | 3 | . 2020-04-17 SC | Importados/Indefinidos | 14 | 0 | . 2020-04-17 GO | Rio Verde | 13 | 1 | . 2020-04-17 PE | Caruaru | 13 | 1 | . 2020-04-17 BA | Porto Seguro | 13 | 0 | . 2020-04-17 RJ | Barra Mansa | 13 | 1 | . 2020-04-17 RJ | Rio das Ostras | 13 | 3 | . 2020-04-17 CE | Quixadá | 13 | 0 | . 2020-04-17 SC | Imbituba | 13 | 0 | . 2020-04-17 RS | Santa Maria | 13 | 0 | . 2020-04-17 RS | Bento Gonçalves | 13 | 0 | . 2020-04-17 SP | Vinhedo | 12 | 0 | . 2020-04-17 MG | Importados/Indefinidos | 12 | 0 | . 2020-04-17 MT | Sinop | 12 | 0 | . 2020-04-17 AC | Acrelândia | 12 | 0 | . 2020-04-17 RS | Pelotas | 12 | 0 | . 2020-04-17 BA | Uruçuca | 12 | 2 | . 2020-04-17 SP | Rio Claro | 12 | 3 | . 2020-04-17 SP | Ilha Comprida | 12 | 0 | . 2020-04-17 AM | Tonantins | 12 | 0 | . 2020-04-17 MS | Dourados | 11 | 0 | . 2020-04-17 MS | Nova Andradina | 11 | 0 | . 2020-04-17 SC | Lages | 11 | 0 | . 2020-04-17 SC | Jaraguá do Sul | 11 | 0 | . 2020-04-17 SC | Gravatal | 11 | 0 | . 2020-04-17 SC | Antônio Carlos | 11 | 3 | . 2020-04-17 SP | Jandira | 11 | 1 | . 2020-04-17 PA | Marituba | 11 | 1 | . 2020-04-17 CE | Maranguape | 11 | 2 | . 2020-04-17 MG | Varginha | 11 | 1 | . 2020-04-17 RJ | Araruama | 11 | 1 | . 2020-04-17 CE | Horizonte | 11 | 1 | . 2020-04-17 RJ | São Pedro da Aldeia | 11 | 1 | . 2020-04-17 AM | São Paulo de Olivença | 11 | 0 | . 2020-04-17 RJ | Barra do Piraí | 11 | 2 | . 2020-04-17 AM | Santo Antônio do Içá | 11 | 0 | . 2020-04-17 AM | Parintins | 11 | 3 | . 2020-04-17 MG | Extrema | 10 | 0 | . 2020-04-17 SC | Sombrio | 10 | 1 | . 2020-04-17 PE | Paudalho | 10 | 3 | . 2020-04-17 PE | Importados/Indefinidos | 10 | 1 | . 2020-04-17 SP | Mairiporã | 10 | 2 | . 2020-04-17 BA | Importados/Indefinidos | 9 | 1 | . 2020-04-17 SP | Barretos | 9 | 0 | . 2020-04-17 SP | Indaiatuba | 9 | 0 | .",
            "url": "https://covid19graficos.github.io/relatorio/coronavirus/2020/04/18/corona-brasil-interativo.html",
            "relUrl": "/coronavirus/2020/04/18/corona-brasil-interativo.html",
            "date": " • Apr 18, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Projeção do Covid-19 no Brasil",
            "content": "Gr&#225;ficos . Proje&#231;&#227;o do n&#250;mero de casos no Brasil para a pr&#243;xima semana . Proje&#231;&#227;o do n&#250;mero de &#243;bitos no Brasil para a pr&#243;xima semana . N&#250;mero de Casos Novos Confirmados . N&#250;meros de &#211;bitos Novos . Agradecimentos e Contribui&#231;&#245;es . Ívi M. de Carvalho, D. Sc. | . (Para Programadores) C&#243;digo para gera&#231;&#227;o dos gr&#225;ficos . NOTA: O resto desse relatório está focado no desenvolvimento dos gráficos mostrados acima. Somente é relevante caso tenha interesse em Python e Data Analysis . Neste relatório vamos desenvolver em Python uma projeção que pode ser atualizada em tempo real do número de casos de Covid-19 no Brasil. Devido à sua natureza com crescimento exponencial, podemos fazer projeções de curto/médio prazo de acordo com tal tendência. É importante salientar que não existe nenhuma exponencial pura. Em algum momento haverá um ponto de inflexão (quando o número de casos começa a diminuir) e esta exponencial se tornará um sigmóide (como já é o caso da China). Portanto, como não há como prever quando ocorrerá essa inflexão, as projeções somente são úteis para curto e médio prazo. Sem mais delongas, vamos começar! Primeiramente, todas as importações que serão utilizadas: . # Todas as importações vem aqui import numpy as np import pandas as pd; import matplotlib.pyplot as plt import seaborn as sns; from sklearn.linear_model import LinearRegression from datetime import date . E também parâmetros: . FIGSIZE = (8,4) . Em seguida, vamos importar a base de dados disponibilizada pelo repositório da John Hopkins University. Há duas bases relevantes para nosso caso, uma com o histórico do número de casos e outro com o histório do número de mortes (ambos obtido a partir dos relatórios diários da OMS). . CASOS_URL = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39; MORTES_URL = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39; . Ambos são urls diretas para arquivos .CSV, portanto podemos importá-los diretamente para a biblioteca Pandas do Python, sem precisar baixá-los: . casos = pd.read_csv(CASOS_URL) mortes = pd.read_csv(MORTES_URL) . Vamos visualizar o cabeçalho de cada um: . casos.head() . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 1/28/20 1/29/20 1/30/20 1/31/20 2/1/20 2/2/20 2/3/20 2/4/20 2/5/20 2/6/20 2/7/20 2/8/20 2/9/20 2/10/20 2/11/20 2/12/20 2/13/20 2/14/20 2/15/20 2/16/20 2/17/20 2/18/20 2/19/20 2/20/20 2/21/20 2/22/20 2/23/20 2/24/20 2/25/20 2/26/20 ... 3/9/20 3/10/20 3/11/20 3/12/20 3/13/20 3/14/20 3/15/20 3/16/20 3/17/20 3/18/20 3/19/20 3/20/20 3/21/20 3/22/20 3/23/20 3/24/20 3/25/20 3/26/20 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 4/6/20 4/7/20 4/8/20 4/9/20 4/10/20 4/11/20 4/12/20 4/13/20 4/14/20 4/15/20 4/16/20 4/17/20 . 0 NaN | Afghanistan | 33.0000 | 65.0000 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | ... | 4 | 5 | 7 | 7 | 7 | 11 | 16 | 21 | 22 | 22 | 22 | 24 | 24 | 40 | 40 | 74 | 84 | 94 | 110 | 110 | 120 | 170 | 174 | 237 | 273 | 281 | 299 | 349 | 367 | 423 | 444 | 484 | 521 | 555 | 607 | 665 | 714 | 784 | 840 | 906 | . 1 NaN | Albania | 41.1533 | 20.1683 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 2 | 10 | 12 | 23 | 33 | 38 | 42 | 51 | 55 | 59 | 64 | 70 | 76 | 89 | 104 | 123 | 146 | 174 | 186 | 197 | 212 | 223 | 243 | 259 | 277 | 304 | 333 | 361 | 377 | 383 | 400 | 409 | 416 | 433 | 446 | 467 | 475 | 494 | 518 | 539 | . 2 NaN | Algeria | 28.0339 | 1.6596 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | ... | 20 | 20 | 20 | 24 | 26 | 37 | 48 | 54 | 60 | 74 | 87 | 90 | 139 | 201 | 230 | 264 | 302 | 367 | 409 | 454 | 511 | 584 | 716 | 847 | 986 | 1171 | 1251 | 1320 | 1423 | 1468 | 1572 | 1666 | 1761 | 1825 | 1914 | 1983 | 2070 | 2160 | 2268 | 2418 | . 3 NaN | Andorra | 42.5063 | 1.5218 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 39 | 39 | 53 | 75 | 88 | 113 | 133 | 164 | 188 | 224 | 267 | 308 | 334 | 370 | 376 | 390 | 428 | 439 | 466 | 501 | 525 | 545 | 564 | 583 | 601 | 601 | 638 | 646 | 659 | 673 | 673 | 696 | . 4 NaN | Angola | -11.2027 | 17.8739 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 2 | 2 | 3 | 3 | 3 | 4 | 4 | 5 | 7 | 7 | 7 | 8 | 8 | 8 | 10 | 14 | 16 | 17 | 19 | 19 | 19 | 19 | 19 | 19 | 19 | 19 | 19 | 19 | . 5 rows × 91 columns . mortes.head() . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 1/28/20 1/29/20 1/30/20 1/31/20 2/1/20 2/2/20 2/3/20 2/4/20 2/5/20 2/6/20 2/7/20 2/8/20 2/9/20 2/10/20 2/11/20 2/12/20 2/13/20 2/14/20 2/15/20 2/16/20 2/17/20 2/18/20 2/19/20 2/20/20 2/21/20 2/22/20 2/23/20 2/24/20 2/25/20 2/26/20 ... 3/9/20 3/10/20 3/11/20 3/12/20 3/13/20 3/14/20 3/15/20 3/16/20 3/17/20 3/18/20 3/19/20 3/20/20 3/21/20 3/22/20 3/23/20 3/24/20 3/25/20 3/26/20 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 4/6/20 4/7/20 4/8/20 4/9/20 4/10/20 4/11/20 4/12/20 4/13/20 4/14/20 4/15/20 4/16/20 4/17/20 . 0 NaN | Afghanistan | 33.0000 | 65.0000 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 2 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 6 | 6 | 7 | 7 | 11 | 14 | 14 | 15 | 15 | 18 | 18 | 21 | 23 | 25 | 30 | 30 | . 1 NaN | Albania | 41.1533 | 20.1683 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 4 | 5 | 5 | 6 | 8 | 10 | 10 | 11 | 15 | 15 | 16 | 17 | 20 | 20 | 21 | 22 | 22 | 23 | 23 | 23 | 23 | 23 | 24 | 25 | 26 | 26 | . 2 NaN | Algeria | 28.0339 | 1.6596 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 1 | 2 | 3 | 4 | 4 | 4 | 7 | 9 | 11 | 15 | 17 | 17 | 19 | 21 | 25 | 26 | 29 | 31 | 35 | 44 | 58 | 86 | 105 | 130 | 152 | 173 | 193 | 205 | 235 | 256 | 275 | 293 | 313 | 326 | 336 | 348 | 364 | . 3 NaN | Andorra | 42.5063 | 1.5218 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 3 | 3 | 3 | 6 | 8 | 12 | 14 | 15 | 16 | 17 | 18 | 21 | 22 | 23 | 25 | 26 | 26 | 29 | 29 | 31 | 33 | 33 | 35 | . 4 NaN | Angola | -11.2027 | 17.8739 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | . 5 rows × 91 columns . Como para este relatório temos interesse em apenas dados do Brasil, vamos atribuir duas novas variáveis à ambos: . def filter_country(df, country): # Filtrar pais df = df[df[&#39;Country/Region&#39;]==country] # Remover colunas iniciais, manter somente as datas df = df.iloc[:, 4:] # Transpor df = df.T # Redefinir coluna df.columns = [country] # Definir index para Datetime df.index = pd.to_datetime(df.index) return df casos_brasil = filter_country(casos, &#39;Brazil&#39;) mortes_brasil = filter_country(mortes, &#39;Brazil&#39;) . Vamos ver como ficaram os novos dataframes: . casos_brasil.tail() . Brazil . 2020-04-13 23430 | . 2020-04-14 25262 | . 2020-04-15 28320 | . 2020-04-16 30425 | . 2020-04-17 33682 | . mortes_brasil.tail() . Brazil . 2020-04-13 1328 | . 2020-04-14 1532 | . 2020-04-15 1736 | . 2020-04-16 1924 | . 2020-04-17 2141 | . Podemos facilmente também plotar tais dados para ver como estão: . casos_brasil.plot(title=&#39;Número de casos&#39;); . mortes_brasil.plot(title=&#39;Número de mortes&#39;); . Podemos conferir se o número de casos está se acelerando ou não plotando um gráfico de barras do número de casos por dia. Isso será importante para identificar a inflexão! . casos_novos_brasil = casos_brasil[1:]-casos_brasil[:-1].values casos_novos_brasil.tail() . Brazil . 2020-04-13 1238 | . 2020-04-14 1832 | . 2020-04-15 3058 | . 2020-04-16 2105 | . 2020-04-17 3257 | . mortes_novas_brasil = mortes_brasil[1:]-mortes_brasil[:-1].values mortes_novas_brasil.tail() . Brazil . 2020-04-13 105 | . 2020-04-14 204 | . 2020-04-15 204 | . 2020-04-16 188 | . 2020-04-17 217 | . Em seguida vamos visualizar ambos em um gráfico de barras: . # Funcao personalizada def plot_bar_novos(df, title): df.index = df.index.strftime(&#39;%d/%m&#39;)#astype(&#39;str&#39;) ax = df.plot.bar( title=title, figsize=FIGSIZE ) _=plt.xticks(rotation=50) return ax . primeiro_caso_filtro = casos_novos_brasil.values&gt;0 ax=plot_bar_novos(casos_novos_brasil[primeiro_caso_filtro], title=&#39;Casos novos (sem acumular, a partir do primeiro caso)&#39;, ) . # Filtrar a partir do primeiro obito primeiro_obito_filtro = mortes_novas_brasil.values&gt;0 # Criar plot ax=plot_bar_novos(mortes_novas_brasil[primeiro_obito_filtro], title=&#39;Óbitos novos (sem acumular, a partir do primeiro óbito)&#39; ) . ax.figure.savefig(&#39;obitos_novos.png&#39;, dpi=300) . Vamos agora dar início à modelagem das projeções. Primeiramente, vamos fazer alguns plots em cima do log dos dados: . casos_brasil[&#39;Brazil&#39;].apply(np.log).plot(marker=&#39;o&#39;, linestyle=&#39;&#39;, title=&#39;Log do Número de casos&#39;); . mortes_brasil[&#39;Brazil&#39;].apply(np.log).plot(marker=&#39;o&#39;, linestyle=&#39;&#39;, title=&#39;Log do Número de Mortes&#39;); . casos_novos_brasil.apply(np.log).plot(marker=&#39;o&#39;, linestyle=&#39;&#39;, title=&#39;Log do número de casos novos&#39;); . mortes_novas_brasil.apply(np.log).plot(marker=&#39;o&#39;, linestyle=&#39;&#39;, title=&#39;Log de novas mortes&#39;); . Todas as curvas acima não representam uma reta perfeita, o que são ótimas notícias: Significa que talvez não esteja mais seguindo uma tendência exponencial. De qualquer forma, vou usar como ponto de partida uma regressão linear, apesar de haverem ressalvas sobre o uso dela. Por simplificação, vou começar com uma projeção do número total de casos e de mortes. Primeiramente, vou juntar todos os dados em um único dataframe: . brasil = pd.DataFrame({ &#39;Confirmados Cumulativo&#39;: casos_brasil[&#39;Brazil&#39;].values[1:], &#39;Confirmados Novos&#39;: casos_novos_brasil[&#39;Brazil&#39;].values, &#39;Mortes Cumulativa&#39;: mortes_brasil[&#39;Brazil&#39;].values[1:], &#39;Mortes Novas&#39;: mortes_novas_brasil[&#39;Brazil&#39;].values }) brasil.index = casos_novos_brasil.index brasil.tail() . Confirmados Cumulativo Confirmados Novos Mortes Cumulativa Mortes Novas . 2020-04-13 23430 | 1238 | 1328 | 105 | . 2020-04-14 25262 | 1832 | 1532 | 204 | . 2020-04-15 28320 | 3058 | 1736 | 204 | . 2020-04-16 30425 | 2105 | 1924 | 188 | . 2020-04-17 33682 | 3257 | 2141 | 217 | . Também podemos criar um dataframe com o log de todos os dados: . brasil_log = brasil.apply(np.log1p) brasil_log.tail() . Confirmados Cumulativo Confirmados Novos Mortes Cumulativa Mortes Novas . 2020-04-13 10.061815 | 7.122060 | 7.192182 | 4.663439 | . 2020-04-14 10.137096 | 7.513709 | 7.334982 | 5.323010 | . 2020-04-15 10.251359 | 8.025843 | 7.459915 | 5.323010 | . 2020-04-16 10.323053 | 7.652546 | 7.562681 | 5.241747 | . 2020-04-17 10.424749 | 8.088869 | 7.669495 | 5.384495 | . Vamos visualizar a distribuição de cada um e também scatter plots de cada um versus o outro: . pd.plotting.scatter_matrix(brasil_log, figsize = (14,8), diagonal = &#39;kde&#39;); . O plot acima fica um pouco enviesado pois há um grande acúmulo de zeros. Vamos filtrar as datas a partir do promeiro óbito: . primeiro_obito = brasil_log.index[brasil_log[&#39;Mortes Cumulativa&#39;]&gt;0][0] primeiro_obito_filtro = brasil_log.index&gt;=primeiro_obito primeiro_obito . Timestamp(&#39;2020-03-17 00:00:00&#39;) . Como é uma base bastante recente, vamos também pegar o primeiro caso: . primeiro_caso = brasil_log.index[brasil_log[&#39;Confirmados Cumulativo&#39;]&gt;0][0] primeiro_caso_filtro = brasil_log.index&gt;=primeiro_caso primeiro_caso . Timestamp(&#39;2020-02-26 00:00:00&#39;) . Vamos repetir o scatter matrix acima a partir dos filtros que definimos: . g = sns.pairplot(brasil[primeiro_obito_filtro], kind=&quot;reg&quot;) g.fig.tight_layout() g.fig.subplots_adjust(top=0.88) g.fig.suptitle(&#39;Grade de gráficos, dados a partir do primeiro óbito&#39;, y=0.92); . g = sns.pairplot(brasil[primeiro_caso_filtro], kind=&quot;reg&quot;) g.fig.suptitle(&#39;Scatter Matrix com filtro a partir do primeiro caso&#39;, y=1.08); . g = sns.pairplot(brasil_log[primeiro_obito_filtro], kind=&quot;reg&quot;) g.fig.suptitle(&#39;Scatter Matrix do Log dos dados com filtro a partir do primeiro óbito&#39;, y=1.08); . g = sns.pairplot(brasil_log[primeiro_obito_filtro], kind=&quot;reg&quot;) g.fig.suptitle(&#39;Scatter Matrix do Log dos dados com filtro a partir do primeiro óbito&#39;, y=1.08); . Os plots acima, talvez pareçam informação irrelevante, mas o fiz para ter uma ideia sobre a distribuição dos dados e se há alguma distribuição normal em algum caso, que justificaria o uso do desvio padrão (uma vez que o mesmo é em relação à distribuição normal). De qualquer forma, para manter as coisas simples inicialmente, vou manter meu plano inicial de criar uma projeção do número de casos incluindo o intervalo do desvio padrão. Então vamos começar pegando o as estatísticas filtrando a partir do primeiro caso: . std = brasil_log[primeiro_caso_filtro].std() . Visualizar um plot da tendência que vamos modelar: . brasil_log[primeiro_caso_filtro][&#39;Confirmados Cumulativo&#39;].plot() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f2929183b00&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f292d674358&gt; . Em seguida ajustar uma regressão linear em cima do log: . def fitar(x, y): lr = LinearRegression() lr.fit(x,y) return lr x = np.arange(sum(primeiro_caso_filtro)).reshape(-1,1) y = brasil_log[primeiro_caso_filtro][&#39;Confirmados Cumulativo&#39;].values lr_casos = fitar(x, y) . def projetar(lr, x, y, plot=True): y_pred = lr.predict(x) if plot: plt.scatter(x, y) plt.plot(y_pred, &#39;r&#39;) plt.title(&quot;Projeção logarítmica&quot;) plt.show() plt.scatter(x, np.expm1(y)) plt.plot(np.expm1(y_pred), &#39;r&#39;) plt.title(&quot;Projeção exponencial&quot;) plt.show() return y_pred y_pred = projetar(lr_casos, x, y) . A projeção acima não ficou boa, vamos testar suavizar com um exponential moving average: . def generate_moving_average(data, mom=0.7): MOM = 0.7 rolling_mean = [data[0]] for d in data[1:]: rolling_mean.append(rolling_mean[-1]*MOM + (1-MOM)*d) return np.array(rolling_mean) def fitar_projetar(x, y, mom=None): if mom is not None: y_old = y y = generate_moving_average(y) lr = fitar(x, y) y_pred = projetar(lr, x, y, plot=not mom) # Plota se mom for nulo if mom is not None: y_pred_exp = np.expm1(y_pred) reversed_mv = [(rm-rm_*mom)/(1-mom) for rm, rm_ in zip(y_pred_exp[1:], y_pred_exp[:-1])] plt.scatter(x, np.expm1(y_old), label=&quot;Original&quot;) plt.scatter(x, np.expm1(y), label=&quot;Exp. Moving Average&quot;) plt.plot(y_pred_exp, &#39;r&#39;, label=&quot;Projeção do EMA&quot;) plt.plot(reversed_mv, label=&quot;EMA reverso para projeção real&quot;) plt.legend() plt.title(f&quot;Projeção com Exp. Moving Average (momentum = {mom})&quot;) plt.show() return y_pred y_pred = fitar_projetar(x, y, mom=0.5) . Também não ficou muito boa. Um dos motivos de estas funções não estarem se saindo bem é que o erro está sendo inferido na escala logarítmica, ou seja, enquanto estamos na escala logarítmica, o erro em termos absolutos é pequeno, no entanto, quando passamos à escala normal, o erro aumenta consideravelmente. Parra corrigir isso, precisamos ajustar uma função exponencial diretamente sem realizar a transformação logarítmica. Precisamos de uma função de custo que infira o erro diretamente da exponencial. Podemos fazer isso com o auxílio de otimizadores de redes neurais. Vamos também aproveitar para ajustar uma sigmóide. E aqui um detalhe: para quem é de machine learning, as boas práticas de seleção de modelos não se aplicam aqui (por exemplo, divisão treinamento e teste). Como os modelos a serem ajustados são bastante simples, não há a necessidade de reservar um conjunto de validação/teste. . # Creating a model from keras.models import Sequential; from keras.layers import Dense from keras import backend as K from keras.optimizers import Adam from keras.activations import sigmoid, elu def get_keras_model(lr=0.001, activation=&#39;exp&#39;): if activation==&#39;exp&#39;: def activ_func(x): return K.exp(x) - 1 elif activation==&#39;sigm&#39;: activ_func = sigmoid elif activation==&#39;elu&#39;: activ_func = elu # Usage model = Sequential(); model.add(Dense(1, input_dim=1, activation=activ_func)) model.compile(optimizer=Adam(lr=lr), loss=&#39;mean_squared_error&#39;) return model . Using TensorFlow backend. . # Definir entrada e saida x = np.arange(sum(primeiro_caso_filtro)).reshape(-1,1) y = brasil[primeiro_caso_filtro][&#39;Confirmados Cumulativo&#39;].values . # Preparar dados def preparar_dados(x, y): x_mean = x.mean() x_std = x.std() y_mean = y.mean() y_std = y.std() x_prep = (x-x_mean)/x_std y_prep = (y-y_mean)/y_std return x_prep, y_prep x_prep, y_prep = preparar_dados(x, y) . #hide_output model = get_keras_model(lr=0.1) model.fit(x_prep, y_prep, epochs=100, verbose=0); . from sklearn.metrics import r2_score . def projetar_keras(model, x, y, days_ahead=0, plot=True, model_func=&quot;exponencial&quot;, tipo=&#39;caso&#39;, exibir_pontos=False, anotar_dados_reais=True, dados_reais_step=2): title = f&#39;Projeção {model_func} de {tipo}s de Covid-19 no Brasil&#39; + f&#39; para os próximos {days_ahead} dias&#39; hoje = date.today() hoje = hoje.strftime(&quot;%d/%m&quot;) x_mean = x.mean() x_std = x.std() y_mean = y.mean() y_std = y.std() n_days = len(x) x_proj = np.arange(n_days+days_ahead).reshape(-1,1) x_prep = (x_proj-x_mean)/x_std y_prep = (y-y_mean)/y_std y_pred = model.predict(x_prep) y_pred = y_pred*y_std + y_mean #Reverse y_pred back y_pred = y_pred.astype(int) y_pred = np.clip(y_pred, 0, None) y_pred = y_pred.squeeze() #print(y) #print(y_pred) r2 = r2_score(y, y_pred[:-days_ahead]) if plot: fig = plt.figure(figsize=FIGSIZE) # Plotar projeção plt.plot(x_proj[-days_ahead-1:], y_pred[-days_ahead-1:], &#39;-&#39;, color=&#39;red&#39;, label=&#39;Projeção&#39;) # Plotar função if exibir_pontos: plt.plot(x_proj[:-days_ahead], y_pred[:-days_ahead], &#39;-&#39;, color=&#39;red&#39;, label=f&#39;Ajuste {model_func} (R²={r2:.2f})&#39;, alpha=0.4) #plt.scatter(x, y, label=&#39;Dados reais&#39;, color=&#39;orange&#39;) plt.plot(y, &#39;.&#39;, label=&#39;Dados reais&#39;) plt.title(title) for x_anot, y_anot in zip(x_proj[-days_ahead:], y_pred[-days_ahead:]): plt.annotate(y_anot, (x_anot, y_anot), ha=&#39;right&#39;, color=&#39;red&#39;) plt.annotate(f&#39;({hoje}): {y[-1]}&#39;, (x[-1], y[-1]), ha=&#39;right&#39;, color=&#39;black&#39;, textcoords=&quot;offset points&quot;, xytext=(-5,0)) if anotar_dados_reais: for x_anot, y_anot in zip(x[:-1:dados_reais_step], y[:-1:dados_reais_step]): plt.annotate(y_anot, (x_anot, y_anot), ha=&#39;right&#39;, color=&#39;midnightblue&#39;, textcoords=&quot;offset points&quot;, xytext=(-5,3) ) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.legend() plt.xlabel(f&quot;Dias desde o primeiro {tipo} no Brasil&quot;) plt.ylabel(f&#39;{tipo.capitalize()}s confirmados acumulados&#39;) plt.xticks(x_proj[::2]) plt.show() return y_pred, fig . y_pred, fig = projetar_keras(model, x, y, days_ahead=7, exibir_pontos=True, anotar_dados_reais=False, dados_reais_step=3) . Por curiosidade, vamos testar ajustar um sigmóide: . #hide_output model = get_keras_model(lr=1, activation=&#39;sigm&#39;) model.fit(x_prep, y_prep, epochs=100, verbose=0); . y_pred, fig = projetar_keras(model, x, y, days_ahead=5, model_func=&#39;sigmóide&#39;, exibir_pontos=True) . Bem distante do esperado :) Vamos testar também o ELU: . #hide_output model = get_keras_model(lr=0.1, activation=&#39;elu&#39;) model.fit(x_prep, y_prep, epochs=100, verbose=0); . y_pred, fig = projetar_keras(model, x, y, days_ahead=7, model_func=&quot;ELU (Exp. Linear Unit)&quot;, exibir_pontos=True) . Um pouco melhor, mas neste caso com tendência linear. Vamos também replicar estes dois últimos para o número de óbitos. . # Definir entrada e saida x = np.arange(sum(primeiro_obito_filtro)).reshape(-1,1) y = brasil[primeiro_obito_filtro][&#39;Mortes Cumulativa&#39;].values x_prep, y_prep = preparar_dados(x, y) . #hide_output model = get_keras_model(lr=0.1, activation=&#39;exp&#39;) model.fit(x_prep, y_prep, epochs=100, verbose=0); . y_pred, fig = projetar_keras(model, x, y, days_ahead=7, model_func=&quot;exponencial&quot;, tipo=&#39;obito&#39;, exibir_pontos=True, anotar_dados_reais=False, dados_reais_step=3) . #hide_output model = get_keras_model(lr=0.1, activation=&#39;elu&#39;) model.fit(x_prep, y_prep, epochs=100, verbose=0); . y_pred, fig = projetar_keras(model, x, y, days_ahead=7, model_func=&quot;ELU (Exp. Linear Unit)&quot;, tipo=&#39;obito&#39;, exibir_pontos=True) .",
            "url": "https://covid19graficos.github.io/relatorio/coronavirus/2020/04/17/projecao-brasil.html",
            "relUrl": "/coronavirus/2020/04/17/projecao-brasil.html",
            "date": " • Apr 17, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Sobre este website . Este website foi criado utilizando fastpages no qual permite a conversão automática de arquivos do Jupyter notebook em páginas da web. Temos o objetivo de tornar análises comparativas do Brasil com o resto do mundo de maneira à melhor informar a população. Sugestões de relatórios podem ser submetidas em nosso repositório. . Desenvolvedores . Vinicius Bastos Gomes Linkedin: https://www.linkedin.com/in/vinicius-gomes-phd-490557163/ | Github: https://github.com/ViniciusBG | . | Fernando Marcos Wittmann LinkedIn: https://www.linkedin.com/in/fernandowittmann/ | GitHub: https://github.com/WittmannF | . | . Fontes . John Hopkins University: https://github.com/CSSEGISandData/COVID-19 | Brasil.io: https://brasil.io/dataset/covid19/boletim | Ministério da Saúde: https://covid.saude.gov.br/ | . As fontes de cada relatório podem também ser conferidas em nossos notebooks. .",
          "url": "https://covid19graficos.github.io/relatorio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}